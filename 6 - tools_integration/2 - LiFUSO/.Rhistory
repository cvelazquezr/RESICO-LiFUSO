runApp()
runApp()
selected.terms
length("")
length("d")
nchar("")
nchar("a")
runApp()
View(lower.case.terms)
runApp()
runApp()
length(words)
length(frequency)
wordcloud(words, frequency, rot.per = 0)
wordcloud(words, frequency, rot.per = 0, fixed.asp = F)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
length(terms)
length(types.terms)
which(terms == words[1])
words[1]
words
words[1]
words
which(terms == words[1])
types.terms[which(terms == words[1])]
head(types.terms[which(terms == words[1])], n = 1)
floor(2.5)
runApp()
runApp()
ength(which(terms == word))
length(which(terms == word))
39/3
type.word
type.word == "C"
runApp()
word
type.word
length(which(terms == word)
)
98/3
floor(98/3)
frequency
runApp()
name.generated[[1]]
name.generated[[2]]
runApp()
runApp()
length(which(terms == word))
length(which(terms == word)) / 3
name.generated[[1]]
name.generated[[2]]
words <- name.generated[[1]]
frequency <- name.generated[[2]]
wordcloud(words, frequency, scale = c(8, .3), min.freq = 1, rot.per = 0, fixed.asp = F)
wordcloud(words, frequency, scale = c(8, .3), rot.per = 0, fixed.asp = F)
wordcloud(words, frequency, scale = c(4, .3), rot.per = 0, fixed.asp = F)
runApp()
runApp()
runApp()
words
frequency
runApp()
runApp()
runApp()
runApp()
runApp()
words
frequency
runApp()
runApp()
View(methods.dataframe)
selected.calls
selected.calls
results.calls
filtered.snippets
View(results.frequent)
View(methods.dataframe)
runApp()
filtered.data_calls
s
s
s
runApp()
cluster
length(cluster)
unique.methods.usages
all.classes
all.methods
all.methods
unique.classes
unique.methods
freq.methods
cluster
data.calls
freq.methods
unique.methods
runApp()
freq.methods
all.methods
which(all.methods == "close")
View(classes.methods.calls.list)
length(which(all.methods == "close"))
runApp()
uasge
usage
runApp()
usage
cleaned.calls
methods.usages
methods.usages
runApp()
runApp()
words
frequency
runApp()
runApp()
View(results.filtered)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
name.elements
nodes
frequencies
nodes
View(relationships.filtered)
length(relationships.filtered)
index
nodes[1]
length(nodes)
length(frequencies)
frequencies[1]
frequencies
sort(frequencies)
sort(frequencies)
?sort
sorted.frequencies <- sort(frequencies, decreasing = T)
get_outliers(sorted.frequencies)
get_outliers(frequencies)
get_outliers(sorted.frequencies)
nodes
relation.pivot
relation.numbered
relation.pivot
relation.numbered
runApp()
length(name.elements)
length(unique(name.elements))
frequency.elements <- unlist(lapply(unique(name.elements), function(element) length(which(name.elements == element))))
max(frequency.elements)
sort(frequency.elements)
sort(frequency.elements, decreasing = T)
get_outliers(sort(frequency.elements, decreasing = T))
unique.elements <- unique(name.elements)
selected.elements <- unique.elements[which(frequency.elements >= 31)]
selected.elements
selected.elements <- unique.elements[which(frequency.elements >= 21)]
selected.elements
runApp()
runApp()
which(sorted.frequencies == last.outlier)
runApp()
sorted.frequencies
runApp()
runApp()
runApp()
View(names.cluster)
runApp()
runApp()
sort(c("use", "cache"))
sort(c("cache", "use"))
"hello" + " world"
runApp()
names()
names
runApp()
names
c(1:10:2)
c(1:10, by=2)
seq(1:10, by=2)
seq(from=1,  to=10, by=2)
seq(from=1, to=10, by=2)
seq(from=1, to=10, by=2)[3]
seq(from=10, to=1, by=2)
seq(from=10, to=1, by=-]2)
seq(from=10, to=1, by=-2)
runApp()
names
selected.elements
runApp()
runApp()
runApp()
names
unlist(names)
runApp()
names
original.length
runApp()
names
runApp()
runApp()
runApp()
runApp()
runApp()
outliers.names
sorted.frequencies
length(outliers.names)
get_outliers(sorted.frequencies, 1)
runApp()
index.name
runApp()
runApp()
runApp()
View(filtered.dataframe_cookbook)
runApp()
runApp()
View(filtered.dataframe_cookbook)
View(clusters)
clusters[[75]]
runApp()
View(filtered.dataframe_cookbook)
View(clusters)
clusters[[8]]
clusters[[36]]
clusters[[70]]
clusters[[17]]
clusters[[33]]
clusters[[10]]
clusters[[68]]
clusters[[1]]
runApp()
runApp()
runApp()
runApp()
?reticulate
runApp()
shiny::runApp()
runApp()
library(reticulate)
import numpy as np
import pandas as pd
from sys import argv
from sklearn.neighbors import LocalOutlierFactor
use_python("/usr/bin/python3", required=T)
runApp()
runApp()
setwd("~/Dev/R/features/clusters-exploration")
runApp()
source_python("scripts/local_bumps.py")
use_python("/usr/bin/python3", required=T)
source_python("scripts/local_bumps.py")
reticulate::py_discover_config()
source_python("scripts/local_bumps.py")
use_python("/usr/bin/python3", required=T)
source_python("scripts/local_bumps.py")
source_python("scripts/local_bumps.py")
source_python("scripts/local_bumps.py")
use_python("/usr/bin/python3", required=T)
source_python("scripts/local_bumps.py")
use_virtualenv("~/programs/python/venvs/machine-learning")
source_python("scripts/local_bumps.py")
shiny::runApp()
install.packages(c("arules", "backports", "BH", "brio", "broom", "bslib", "caret", "cli", "clue", "cpp11", "crayon", "data.table", "DBI", "dendextend", "desc", "diffobj", "digest", "float", "fmsb", "fs", "future", "gender", "generics", "glmnet", "glue", "gmp", "hms", "httpuv", "igraph", "knitr", "lattice", "lifecycle", "lubridate", "Matrix", "mgcv", "mime", "ngram", "nloptr", "openssl", "openxlsx", "parallelly", "pillar", "pkgbuild", "pkgload", "pracma", "progressr", "psych", "quanteda", "RcppArmadillo", "readr", "recipes", "RhpcBLASctl", "rJava", "rlang", "rsparse", "shiny", "skmeans", "slam", "stopwords", "stringi", "testthat", "tibble", "tidyr", "tinytex", "TTR", "tzdb", "viridis", "vroom", "withr", "xfun", "xml2"))
shiny::runApp()
use_virtualenv("~/programs/python/venvs/machine-learning")
source_python("scripts/local_bumps.py")
use_virtualenv("~/programs/python/venvs/machine-learning", required = T)
source_python("scripts/local_bumps.py")
reticulate::conda_list()
library(reticulate)
virtualenv_create("lof-features")
# Packages
py_install("pip", envname = "lof-features")
py_install("numpy", envname = "lof-features")
py_install("pandas", envname = "lof-features")
py_install("scikit-learn", envname = "lof-features")
# Use the environment
use_virtualenv("lof-features")
source_python("scripts/local_bumps.py")
source_python("scripts/local_bumps.py")
import numpy as np
source_python("scripts/local_bumps.py", envir = "lof-features")
np <- import("numpy")
# Use the environment
use_virtualenv("lof-features")
source_python("scripts/local_bumps.py")
reticulate::install_miniconda(path = "~/programs/python/venvs/lof-features")
reticulate::install_miniconda(path = "~/programs/python/venvs/lof-features")
source_python("scripts/local_bumps.py")
reticulate::install_miniconda(path = "~/programs/python/venvs/lof-features")
conda_install("numpy", envname = "lof-features")
miniconda_path()
miniconda_path("~/programs/python/venvs/lof-features")
use_miniconda("lof-features")
use_miniconda("~/programs/python/venvs/lof-features")
use_miniconda("~/programs/python/venvs/lof-features/bin/activate")
reticulate::install_miniconda()
conda_install("numpy")
conda_install("numpy", envname = "r-miniconda")
conda_install("numpy", envname = "r-reticutale")
conda_install("pandas", envname = "r-reticutale")
conda_install("scikit-learn", envname = "r-reticutale")
use_miniconda("r-reticulate")
source_python("scripts/local_bumps.py")
reticulate::configure_environment()
reticulate::py_config()
reticulate::py_config()
reticulate::import("numpy")
reticulate::py_discover_config()
conda_install("numpy", envname = "r-reticulate")
conda_install("pandas", envname = "r-reticulate")
conda_install("scikit-learn", envname = "r-reticulate")
use_miniconda("r-reticulate")
source_python("scripts/local_bumps.py")
renv::use_python()
reticulate::py_config()
use_miniconda("r-reticulate")
reticulate::import("numpy")
reticulate::py_discover_config()
library(reticulate)
# Loading the Python script for the highest indices
source_python("scripts/local_bumps.py")
shiny::runApp()
runApp()
setwd("~/Dev/R/features/clusters-exploration")
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
install.packages(c("arules", "broom", "class", "cli", "dbscan", "fansi", "foreign", "glue", "highcharter", "httpuv", "igraph", "ISOcodes", "jsonlite", "magrittr", "MASS", "MatrixExtra", "nlme", "nloptr", "nnet", "openssl", "pillar", "Rcpp", "RcppArmadillo", "RcppParallel", "reticulate", "rjson", "rlang", "rpart", "shinyjs", "slam", "spatial", "testthat", "yaml"))
julia keyword extractor
install.packages("textrank")
install.packages("udpipe")
library(textrank)
data("joboffer")
View(joboffer)
head(joboffer[, c("sentence_id", "lemma", "upos")], 10)
View(joboffer)
job_rawtxt <- readLines(system.file(package = "textrank", "extdata", "joboffer.txt"))
job_rawtxt <- paste(job_rawtxt, collapse = "\n")
library(udpipe)
tagger <- udpipe_download_model("english")
tagger <- udpipe_load_model(tagger$file_model)
View(tagger)
joboffer <- udpipe_annotate(tagger, job_rawtxt)
View(joboffer)
joboffer <- as.data.frame(joboffer)
View(joboffer)
keyw <- textrank_keywords(joboffer$lemma,
relevant = joboffer$upos %in% c("NOUN", "VERB", "ADJ"))
subset(keyw$keywords, ngram > 1 & freq > 1)
?textrank_keywords
subset(keyw$keywords, freq > 1)
job_rawtxt
raw.text <- "I recently started using JFreeChart and there is something i would like to do but i'm not sure if it's possible.\n My program is supposed to draw a spectrogram (a sound graph) from a wav file.\n So i managed to get the data from my wav file in a double arraylist and to display it in a chart.\n But now i would like to be able to select an area of my spectrogram (with the same tool used for zooming) without zooming and to be able to play only the selected part on my sound.\n But i simply can't find any way to succeed.\n Here is my code of my chart:"
text.proc <- udpipe_annotate(tagger, raw.text)
text.proc <- as.data.frame(text.proc)
View(text.proc)
keyw <- textrank_keywords(text.proc$lemma, elevant = text.proc$upos %in% c("NOUN", "VERB", "ADJ"))
keyw <- textrank_keywords(text.proc$lemma, relevant = text.proc$upos %in% c("NOUN", "VERB", "ADJ"))
View(keyw)
subset(keyw$keywords, ngram > 1 & freq > 1)
subset(keyw$keywords, freq > 1)
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
install.packages(c("BBmisc", "BiocManager", "broom", "caret", "checkmate", "cli", "cluster", "commonmark", "crayon", "desc", "dplyr", "fansi", "filehash", "float", "fmsb", "formatR", "future", "future.apply", "ggplot2", "glmnet", "globals", "glue", "gmp", "gplots", "httr", "igraph", "jsonlite", "knitr", "kohonen", "lme4", "magrittr", "MASS", "Matrix", "mgcv", "mlapi", "NbClust", "ngram", "nlme", "nloptr", "openssl", "parallelly", "plyr", "pracma", "processx", "ps", "psych", "qdapRegex", "quanteda", "quantmod", "r2d3", "RColorBrewer", "Rcpp", "RcppArmadillo", "RcppEigen", "rlang", "rmarkdown", "rprojroot", "sass", "scales", "survival", "testthat", "text2vec", "tibble", "tinytex", "tsne", "tzdb", "udpipe", "vctrs", "VennDiagram", "venneuler", "waldo", "withr", "xfun", "XML", "zoo"))
install.packages(c("BBmisc", "BiocManager", "broom", "caret", "checkmate", "cli", "cluster", "commonmark", "crayon", "desc", "dplyr", "fansi", "filehash", "float", "fmsb", "formatR", "future", "future.apply", "ggplot2", "glmnet", "globals", "glue", "gmp", "gplots", "httr", "igraph", "jsonlite", "knitr", "kohonen", "lme4", "magrittr", "MASS", "Matrix", "mgcv", "mlapi", "NbClust", "ngram", "nlme", "nloptr", "openssl", "parallelly", "plyr", "pracma", "processx", "ps", "psych", "qdapRegex", "quanteda", "quantmod", "r2d3", "RColorBrewer", "Rcpp", "RcppArmadillo", "RcppEigen", "rlang", "rmarkdown", "rprojroot", "sass", "scales", "survival", "testthat", "text2vec", "tibble", "tinytex", "tsne", "tzdb", "udpipe", "vctrs", "VennDiagram", "venneuler", "waldo", "withr", "xfun", "XML", "zoo"))
install.packages(c("BBmisc", "BiocManager", "broom", "caret", "checkmate", "cli", "cluster", "commonmark", "crayon", "desc", "dplyr", "fansi", "filehash", "float", "fmsb", "formatR", "future", "future.apply", "ggplot2", "glmnet", "globals", "glue", "gmp", "gplots", "httr", "igraph", "jsonlite", "knitr", "kohonen", "lme4", "magrittr", "MASS", "Matrix", "mgcv", "mlapi", "NbClust", "ngram", "nlme", "nloptr", "openssl", "parallelly", "plyr", "pracma", "processx", "ps", "psych", "qdapRegex", "quanteda", "quantmod", "r2d3", "RColorBrewer", "Rcpp", "RcppArmadillo", "RcppEigen", "rlang", "rmarkdown", "rprojroot", "sass", "scales", "survival", "testthat", "text2vec", "tibble", "tinytex", "tsne", "tzdb", "udpipe", "vctrs", "VennDiagram", "venneuler", "waldo", "withr", "xfun", "XML", "zoo"))
install.packages(c("BBmisc", "BiocManager", "broom", "caret", "checkmate", "cli", "cluster", "commonmark", "crayon", "desc", "dplyr", "fansi", "filehash", "float", "fmsb", "formatR", "future", "future.apply", "ggplot2", "glmnet", "globals", "glue", "gmp", "gplots", "httr", "igraph", "jsonlite", "knitr", "kohonen", "lme4", "magrittr", "MASS", "Matrix", "mgcv", "mlapi", "NbClust", "ngram", "nlme", "nloptr", "openssl", "parallelly", "plyr", "pracma", "processx", "ps", "psych", "qdapRegex", "quanteda", "quantmod", "r2d3", "RColorBrewer", "Rcpp", "RcppArmadillo", "RcppEigen", "rlang", "rmarkdown", "rprojroot", "sass", "scales", "survival", "testthat", "text2vec", "tibble", "tinytex", "tsne", "tzdb", "udpipe", "vctrs", "VennDiagram", "venneuler", "waldo", "withr", "xfun", "XML", "zoo"))
library(dynamicTreeCut)
?cutreeHybrid
shiny::runApp()
shiny::runApp()
install.packages("highcharter")
install.packages("highcharter")
shiny::runApp()
gc()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
number.clusters
unique.labels[1]
length(document.corpus)
length(document.names)
length(title.links)
runApp()
runApp()
runApp()
gc()
runApp()
runApp()
number.clusters
cluster.group
cluster.subgroup
value.calls
length(document.corpus)
length(document.corpus[1])
document.corpus[1]
strsplit(document.corpus[1], " ")
strsplit(document.corpus[1], " ")[[1]]
runApp()
cluster.sentence.lengths
length(cluster.sentence.lengths)
sum(cluster.sentence.lengths)
cluster.sentence.lengths
length(cluster.sentence.lengths)
sum(cluster.sentence.lengths)
runApp()
document
cluster.sentence
runApp()
gc()
install.packages(c("cpp11", "htmltools", "igraph", "promises", "purrr", "reticulate", "tinytex", "xfun"))
source("~/Dev/PhD/features-lab/6 - tools_integration/2 - LiFUSO/scripts/extract-new-features.R")
source("~/Dev/PhD/features-lab/6 - tools_integration/2 - LiFUSO/scripts/extract-new-features.R")
source("~/Dev/PhD/features-lab/6 - tools_integration/2 - LiFUSO/processing.R")
source("~/Dev/PhD/features-lab/6 - tools_integration/2 - LiFUSO/processing.R")
setwd("~/Dev/PhD/features-lab/6 - tools_integration/2 - LiFUSO")
source("~/Dev/PhD/features-lab/6 - tools_integration/2 - LiFUSO/processing.R")
setwd("~/Dev/PhD/features-lab/6 - tools_integration/2 - LiFUSO")
setwd("~/Dev/PhD/features-lab/6 - tools_integration/2 - LiFUSO")
source("~/Dev/PhD/features-lab/6 - tools_integration/2 - LiFUSO/processing.R")
setwd("~/Dev/PhD/features-lab/6 - tools_integration/2 - LiFUSO")
libraries = c("httpclient", "jfreechart", "jsoup", "pdfbox", "poi-ooxml", "quartz")
source("~/Dev/PhD/features-lab/6 - tools_integration/2 - LiFUSO/processing.R")
setwd("~/Dev/PhD/features-lab/6 - tools_integration/2 - LiFUSO")
source("~/Dev/PhD/features-lab/6 - tools_integration/2 - LiFUSO/processing.R")
setwd("~/Dev/PhD/features-lab/6 - tools_integration/2 - LiFUSO")
debugSource("~/Dev/PhD/features-lab/6 - tools_integration/2 - LiFUSO/processing.R")
setwd("~/Dev/PhD/features-lab/6 - tools_integration/2 - LiFUSO")
debugSource("~/Dev/PhD/features-lab/6 - tools_integration/2 - LiFUSO/processing.R")
max.freq
index.max
index.max
selected.top5
unique.keys
index.max
data.body.top5
data.body.df.ord
setwd("~/Dev/PhD/features-lab/6 - tools_integration/2 - LiFUSO")
source("~/Dev/PhD/features-lab/6 - tools_integration/2 - LiFUSO/processing.R")
setwd("~/Dev/PhD/features-lab/6 - tools_integration/2 - LiFUSO")
source("~/Dev/PhD/features-lab/6 - tools_integration/2 - LiFUSO/processing.R")
source("~/Dev/PhD/features-lab/6 - tools_integration/2 - LiFUSO/scripts/extract-new-features.R")
gc()
source("~/Dev/PhD/features-lab/6 - tools_integration/2 - LiFUSO/scripts/extract-new-features.R")
source("~/Dev/PhD/features-lab/6 - tools_integration/2 - LiFUSO/processing.R")
source("~/Dev/PhD/features-lab/6 - tools_integration/2 - LiFUSO/processing.R")
source("~/Dev/PhD/features-lab/6 - tools_integration/2 - LiFUSO/processing.R")
source("~/Dev/PhD/features-lab/6 - tools_integration/2 - LiFUSO/scripts/extract-new-features.R")
reticulate::py_last_error()
source("~/Dev/PhD/features-lab/6 - tools_integration/2 - LiFUSO/scripts/extract-new-features.R")
reticulate::py_last_error()
source("~/Dev/PhD/features-lab/6 - tools_integration/2 - LiFUSO/scripts/extract-new-features.R")
reticulate::py_last_error()
debugSource("~/Dev/PhD/features-lab/6 - tools_integration/2 - LiFUSO/scripts/extract-new-features.R")
debugSource("~/Dev/PhD/features-lab/6 - tools_integration/2 - LiFUSO/scripts/extract-new-features.R")
debugSource("~/Dev/PhD/features-lab/6 - tools_integration/2 - LiFUSO/scripts/extract-new-features.R")
debugSource("~/Dev/PhD/features-lab/6 - tools_integration/2 - LiFUSO/scripts/extract-new-features.R")
source("~/Dev/PhD/features-lab/6 - tools_integration/2 - LiFUSO/scripts/extract-new-features.R")
source("~/Dev/PhD/features-lab/6 - tools_integration/2 - LiFUSO/scripts/extract-new-features.R")
source("~/Dev/PhD/features-lab/6 - tools_integration/2 - LiFUSO/scripts/extract-new-features.R")
debugSource("~/Dev/PhD/features-lab/6 - tools_integration/2 - LiFUSO/scripts/extract-new-features.R")
debugSource("~/Dev/PhD/features-lab/6 - tools_integration/2 - LiFUSO/scripts/extract-new-features.R")
selected.terms.list
title.list
body.list
domain.body.df
action.body.df
length(title.list[[1]]
)
domain.body.df
length(domain.body.df)
source("~/Dev/PhD/features-lab/6 - tools_integration/2 - LiFUSO/scripts/extract-new-features.R")
source("~/Dev/PhD/features-lab/6 - tools_integration/2 - LiFUSO/scripts/extract-new-features.R")
source("~/Dev/PhD/features-lab/6 - tools_integration/2 - LiFUSO/processing.R")
gc()
data.frame()
source("~/Dev/PhD/features-lab/6 - tools_integration/2 - LiFUSO/processing.R")
setwd("~/Dev/PhD/features-lab/6 - tools_integration/2 - LiFUSO")
source("~/Dev/PhD/features-lab/6 - tools_integration/2 - LiFUSO/processing.R")
source("~/Dev/PhD/features-lab/6 - tools_integration/2 - LiFUSO/processing.R")
source("~/Dev/PhD/features-lab/6 - tools_integration/2 - LiFUSO/scripts/extract-new-features.R")
source("~/Dev/PhD/features-lab/6 - tools_integration/2 - LiFUSO/processing.R")
source("~/Dev/PhD/features-lab/6 - tools_integration/2 - LiFUSO/processing.R")
setwd("~/Dev/PhD/features-lab/6 - tools_integration/2 - LiFUSO")
source("~/Dev/PhD/features-lab/6 - tools_integration/2 - LiFUSO/processing.R")
